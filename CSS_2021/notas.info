* Sintaxis
==================

* Selector: El elemento al que vamos a aplicar estilos
* Propiedad: Lo que vamos a cambiar
* Valor:  El nuevo valor que le vamos a dar a la propiedad
* Propiedad: Valor -> Se le denomina declaración
* Al conjunto de selector + declaracion(es) se le denomina regla


* Selectores
==================

- Selectores simples

    - Elementales

        - Selector universal -> *
        - Selector de tipo o de etiqueta 
    
    - De atributo
        
        - id -> id del elemento
        - clase -> clase del elemento
        - otros atributos -> 
            [atributo]
            [atributo=valor]
            [atributo^=valor] <- comprobar si el atributo empieza por ese valor
            [atributo*=valor] <- se selecciona el valor que coincida independiente de su posicion
            [atributo$=valor] <- comprobar si el atributo termina por ese valor
            [atributo|=valor] <- incluye el valor y valor-...

- Selectores compuestos

    - Agrupados <- atributos separados por ','
    - Combinadores 
        Selector descendiente <- un selector dentro de otro -> [atributo] [atributo]
        Selector de hermano siguiente <- permite seleccionar el elemento hermano siguiente -> [atributo] + [atributo]
        Selector de todos los hermanos siguientes <- permite seleccionar todos los elementos hermanos siguientes -> [atributo] ~ // el simbolo es ALTGR + 4
        Selector de hijo directo <- permite seleccionar sólo los hijos directos -> [atributo] > [atributo]
    - Pseudoclases - pseudoelementos (más adelante)


* Cómo funciona css
=========================

- Especificidad -> Establece cómo de específico es un selector para saber qué estilo aplicar.
                    El cálculo se realiza con la siguiente fórmula:

                     Etiquetas y pseudoelementos -> 001
                     Clases, atributos, pseduoclases -> 010
                     Ids -> 100
                     Estilos en línea -> 1000
                     !important -> GANA A TODO pero se carga la especificidad <- NO USAR NUNCA -- UTILIZAR SIEMPRE CLASES!

            Cascada -> funciona siempre que la especificidad sobre el elemento sea la misma
            Herencia  -> Es la capacidad que tienen algunos elementos de heredar algunas propiedades de sus elementos 
                         contenedores (padres, abuelos, etc)
                         Para forzar la herencia en los elementos que no la tienen por defecto usamos -> inherit
                         Para evitar que un elemento herede una propiedad por defecto usamos -> inital

- como saber si se escribe buen css -> https://jonassebastianohlsson.com/specificity-graph/


* Normalizar estilos de los navegadores
==========================================

https://necolas.github.io/normalize.css/

* Prefijos propietarios
==========================================

- ayuda a poner los prefijos automaticamente -> https://autoprefixer.github.io/
- programa que pone automaticamente los prefijos -> https://prepros.io/

* Box model
==============================

- las cajas se componen principalmente de:
 
        * contenido
        * borde
        * padding
        * margin
        * width
        * height

    # Alto & Ancho

        - Width -> Ancho
        - Height -> Alto

        - Para los elementos en bloque establecen el ancho y el alto
        - Los elementos en línea no tienen medidas, el tamaño lo determina su contenido

    # Margin

        - Es la propiedad que nos permite generar espacio entre elementos.
        - Es un shorthand que controla los cuatro lados posibles a los que dar márquenes.
        - margin-top: Margen superior
        - margin-right: Margen derecho
        - margin-bottom: Margen inferior
        - margin-left: Margen derecho
        - Admite hasta cuatro valores que van en el orden de las agujas del reloj:
            4 valores -> top right bottom left
            3 valores -> top left/right bottom
            2 valores -> top/bottom left/right
            1 valor -> top/right/bottom/left

        - En los elementos en línea los margin top/bottom (verticales) no funcionan
        - En los elementos en línea los margin left/right (horizontales) si funcionan

        - Para los elementos en bloque: (IMPORTANTE: debe ser de bloque y se debe haber establecido el ancho (width))

            margin-right: auto; <- pegamos el elemento a la izquierda
            margin-left: auto; <- pegamos el elemento a la derecha

            si declaremos las dos a auto al mismo tiempo centramos el elemento

        - Malas prácticas:

            * { margin: 0; padding: 0}
            para centrar un elemento no ulizar: margin: 0 auto / usar -> margin-left: auto; margin-right: auto;
            se recomienda body { margin: 0} <- el padding: 0 no es util ya que no por defecto no tiene padding


    # Padding

        - Es la propiedad que nos permite generar espacio entre interno entre el bordy y la caja
        - Es un shorthand que controla los 4 lados posibles 
        - margin-top: padding superior
        - margin-right: padding derecho
        - margin-bottom: padding inferior
        - margin-left: padding derecho
        - Admite hasta cuatro valores que van en el orden de las agujas del reloj:
            4 valores -> top right bottom left
            3 valores -> top left/right bottom
            2 valores -> top/bottom left/right
            1 valor -> top/right/bottom/left

        - Funciona igual para elementos en bloque y en línea
        - Si el objetivo es separar la caja de los elementos que la rodean -> margin
        - Si el objetivo es automentar el temaño de la caja y separar los bordes del contenido -> padding
        
    # Border

        - Es la propiedad que nos permite modificar el borde de la caja
        - Es un shorthand que agrupa tres propiedades
        - border-width: ancho del borde <- shorthand (border-top-width...)
        - border-style: estilo del borde <- shorthand (border-top-style...)
        - border-color: color del borde <- shorthand (border-top-color...)

        * Border-radius

            - Es la propiedad que nos permite redondear vertices de forma independiente
            - Es un shorthand que engloba cuatro propiedades (border-top-left-radius, border-top-right-radius...)
            - Si sólo recibe un valor dibjará un círculo en cada vértice del radio que especifiquemos
            - Si utilizamos el border-radius como shorthand hay diferencias entre si queremos dar un valor a cada lado (círculo) o dos (elipse)

        
    # Box-sizing

        - Es la propiedad que nos permite controlar el cálculo que hace el navegador a la hora de modificar las popiedades content, padding y border.
        - Los dos valores que podemos dar son:
            content-box -> Valor por defecto
            border-box -> cálculo de tamaño del elemento incluyendo el padding y el border

        - buena practica:
            *{ box-sizing: border-box}


* Overflow
==============================

- Decimos que un contenido se desborda cuando la caja es más pequeña que el contenedor
- Es la propiedad que controla qué debe haer la caja cuando su contenido se desborda del contenedor
- Es un shorthand de overflow-x y overflow-y
- Tiene cuatro valores posibles:
    visible -> es el valor por defecto
    hidden -> El contenido que se desborde no se verá. Si aplicamos este propiedad en un solo eje, el otro se pondrá automaticamente en el valor scroll.
    scroll -> aparecerán barras de scroll en el eje asignado
    auto -> aparecerán barras de scroll en el caso de que hicieran falta
    
* Colapsado de márgenes
==============================

- problema: si tenemos una caja con un margin-bottom de 20 pixeles y debajo de ella otra con un margin-top de otros 20px, la lógica es que la separación entre
            ellas fuera de 40 px, pero en realidad se queda en 20px, ya que los márgenes verticales colapsan (se solpan)
- lo que se recomienda es dar margin bottom a los elementos e ir bajando el resto de elementos, ir empujando los elementos hacia abajo con margin-bottom.
- en los horizontales no pasa

- otro problema es el colapsado de márgenes entre padres e hijos, en el ejemplo al meter el h1 en el header, el header se separa del top de la página
- en el ejemplo lo solucionamos con tres trucos diferentes:
    1. darle al contenedor un overflow: hidden;
    2. añadir un padding-top al padre de cualquier tamaño (por ejemplo: 0.1 px)
    3. añadir border-top aunque sea de 0.1px

* Display
============================

- sirve para cambiar el contexto de los elemento sdentro del navegador
- Admite varios valores
    none -> hace que el elemento no se muestre, pero sigue cargandose
    block -> Hace que el elemento sea de bloque
    inline -> Hace que el elemento sea de línea
    inline-block -> Hace que el elemento sea de línea pero admite medidas y márgenes verticales

* Outline
============================

- es la propiedad  que nos permite dibujar un borde por fuera del model de caja
- es un shorthand que engloba (outline-width..style..color)
- tiene las mismas propiedades y sintaxis que border, pero con algunas diferencias
    No ocupa sitio, ya que no forma parte del box-model
    No se puede redondear
    No se pueden controlar los lados de forma independiente
- tambien cuenta con la propiedad outline-offset, que nos permite aumenta o disminuir la distancia del outline en relacion a la caja a la que pertenece

* Text align
============================

- es la propiedad que nos permite alinear horizontalmente el contenido de un elemento de bloque siempre que el contenido NO TENGA ANCHO DECLARADO
- acepta cuatro posibles valores
    text-align: left;
    text-align: right;
    text-align: center;
    text-align: jusrify; <- No es recomendable
- las imagenes por defecto son display: inline-block, para centrar una imagen hay que poner display: block

* Box shadow
============================

- se creo para añadir efectos de sombra a la caja
- en esencia lo que hace es crear un clon de la caja respetando la forma de su box-model
- la sintaxis se puede escribir de distintas formas según lo que queramos conseguir
- los valores posibles
    offset-x -> desplazamiento en x (obligatorio)
    offset-y -> desplazamiento en y (obligatorio)
    blur-radius -> desenfoque de la sombra
    spread-radius -> expansión de la sombra
    color -> color de la sombra, si no se especifica lo heredará  del elemento al que pertenece
    inset -> determina si la sombra será interior o exterior
- box shadow no ocupa sitio en el modelo (box model)
- https://www.codesdope.com/blog/article/10-amazing-effects-you-can-create-using-box-shadow/


* Position
============================

- nos permite posicionar los elementos.
- Flujo de renderizado -> Por normal general los elementos se dibujan de izquierda a derecha y de arriba a abajo. El punto 0,0 de los elementos, por norma general,
                            es la esquina superior izquierda.
- Espacio reservado -> Es el espacio que tiene un elemento asignado en el navegador.
- Elemento posicionado -> Significa que el elemento tiene la propiedad position con un valor distinto de "static", que es el valor que tiene esta propiedad por defecto.
- Stackin context -> contexto de apilamiento. es el orden en el que se aplilarán las cajas que se superponen.
                     es el espacio donde nuestros elementos se van a ir apilando para que unos queden por detrás y otros por delante
                     el orden es:
                        elementos posicionados con un z-index de 1 o más
                        elementos posicionados sin z-index o auto
                        elementos no posicionados
                        elementos con z-index negativo
                    puede haber diferentes contextos de apilamiento dependiendo de las propiedades que se le dan a los elementos
- Al posicionar un elemento se habilitan cinco propiedades que podemos utlizar para mover los elementos en los tres ejes
    top -> el elemento se moverá desde la parte superior en la distancia que hayamos indicado
    right -> El elemento se moverá desde la parte derecha la distancia que hayamos indicado
    bottom -> ...
    left -> ...
    z-index -> nos permite mover el elemento en el contexto de apilamiento (eje-z) (z-index: auto; es lo mismo que no poner nada)
                intentar no utilizar números consecutivos (por si crece la aplicación)
                ! hijo contenido en padre y queremos poner el padre por delante del hijo -> hay que poner el hijo por detrás del padre: hijo con z-index: -1 y el padre sin z-index
    NOTA: si a un elemento le declaramos la propiedad top y/o left, las propiedades bottom y/o right no funcionarán
- Los posibles valores que podemos dar son:
    static -> por defecto, con este valor el elemento NO ESTÁ POSICIONADO y por tanto no podremos moverlo
    relative -> el elemento mantiene su posición y medidas en el flujo de renderizado y mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en el 
                html como punto de referencia
                podemos obligar a los elementos a ocupar un mismo espacio
    absolute -> el elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento padre posicionado como referencia. si no tiene ninguno, usará el
                elemento html de referencia
                lo importante es que el contenedor está posicionado (da igual el tipo) y no hace falta que el elemento sea hijo directo del contenedor
                cuando se le da absolute a un elemento en linea se genera un contexto de bloque automaticamente y poder darle medidas (ya se le puede dar medidas, margenes...)
    fixed -> el elemento perderá sus medidas y su espacio reservado. si lo movemos usará el elemento html de referencia y además se quedará fijo en esa posición, aunque
            hagamos scroll
    sticky -> es una meza de relative y fixed. los valores top, left, bottom y right no sriven para mover el elemento, sirven para indicarle en qué punto pasará a tener un 
                comportamiento de posicionamiento fixed, hasta llegar a ese punto se comportará como si tuviera relative.


* Ordenación de propiedades
============================

- es importante, no existe ninguna norma ni especificacion sobre cómo hacerlo, pero la mayoría de los expertos coinciden en los mismo puntos:

    1. Propiedades de posicionamiento
    2. Propiedades del box-model
    3. Propiedades de texto
    4. Propiedades visuales (colores, bordes, background...)
    5. Resto de propiedades

* Medidas
============================

- se pueden agrupar en absolutas y relativas
- absolutas
    NO CAMBIAN y siempre mantendrán su tamaño, independientemente del dispositivo o la interacción con el usuario
    La más usada es px cuya mediad es 1/96 de 1in, pero existen otras como: cm, mm,Q, in, pc, pt
- relativas
    SIEMPRE dependen de un contexto, son las que se recomienda utilizar en la gran mayoría de ocasiones porque nos van a permitir que todos los 
    elementos escalen proporcionalmente
    las más usadas son em, rem, %, vw, vh, vmin y vmax, pero existen otras como: ex, ch, lh

- rem -> Corresponde a la medida de la "m" de la raiz del documento (html)
- em -> Corresponde a la medida de la "m" del contexto donde nos encontremos.

- El estándar del tamaño de fuente por defecto en la raiz del documento es 16px, y NO ES RECOMENDABE MODIFICARLO.

- NOTA: Tanto em como rem se calcula en base a la propiedad font-size (tamaño de fuente)

- ejemplo: 1rem = 16px

- Recomendaciones:

 Para tamños de fuentes usar SIEMPRE rem, porque asi no habra problemas con el contexto en el que nos encontremos

 Por ejemplo, para dejar espacio al texto de un boton el padding va en em, igual que el border mientras que la fuente va en rem


 - WIDTH
    % -> usamos de referencia el tamaño del contenedor y el navegador calcula ese porcentage. Esto no ocurre cuando usamos transform.
    auto -> le pedimos al navegador que calcule en función del espacio disponible

- HEIGHT
    % -> cuando estamos dentro de un contenedor este tiene que tener un alto declarado, sino no podrá calcular el porcentaje.
         si se le aplica una medida con porcentaje se sustituirá automáticamente por auto.
        si en el elemento usamos el position absolute o fixed, ya no se calcula el alto respecto al contenedor, se calcula automaticamente
        en base al viewport (todo el espacio visible que tenemos)
    
    auto -> la medida la calcula el navegador en base al contenido al elemento.



- NOTA: Height es una propiedad que hay que usar con cuidado, si no es necesario establecer un alto es mejor que el contenido sea el que lo establezca.

- VIEWPORT 
    Es el área útil donde se mostrará la página web. IMPORTANTE: es el área visible sin hacer scroll.
    Podemos usar el viewport como medida de varias formas:
        vw -> viewport width, hace referencia al ancho del viewport.
        vh -> viewport height, hace referencia al alto del viewport.
        vmax -> utiliza el valor más grande entre el ancho y el alto del viewport.
        vmin -> utiliza el valor más pequeños entre el anche y el alto del viewport.

        1vw = 1% del ancho del viewport.
        1vh = 1% del alto del viewport.
        1vmin = 1% del valor que sea más pequeño del viewport
        1vmax = 1% del valor que sea más grande del viewport

- Limitadores al ANCHO y ALTO

    Cuando establecemos un width y/o un height con una medida que es relativa, es posible que no queramos que se 
    respete esa medida en todos los casos.
    Para ello tenemos propiedades que limitan esas medidas:

        min-width: Indica el ancho mínimo que puede alcanzar el elemento.
        max-width: Indica el ancho máximo que puede alcanzar el elemento.
        min-height: Indica el alto mímino que puede alcanzar el elemento.
        max-height: Indica el alto máximo que puede alcanzar el elemento.
        
* Colores
============================

- la mayoría de las pantallas funcionan con un modo de color aditivo. La suma de RGB da como resultado un blanco.
- tenemos varias formas de dar color en css

- keywords -> palabras clave que representan colores
            https://www.w3.org/wiki/CSS/Properties/color/keywords

- Importante: existe el color "transparent"

- CurrentColor: Es una plabra clave que se puede usar en lugar de cualquier valor de color y usará el valor
                establecido o heredado en la propiedad.

- RGB / RGBA

    En el modo rgb tenemos tres canales (Red,Green,Blue) y tenemos 8 bits de color por canal. (0-255)
    Esto nos da un total de 255 * 255 * 255 = 16.581.375 colores
    Su sintaxis es rgb(R,G,B)
    Si ponemos todos los canales a 0 tendremos un negro puro y si los ponemos a 255 tenemos un blanco
    Para movernos por la gama de grises debemos poner los tres canales con el mismo valor, a 128 es el gris puro
    El modo RGB nos da la posibilidad de usar un cuarto canal, que sería el canal alpha, es decir, la transparencia
    y su valor va desde 0 a 1. Tenemos dos sintaxis para utilizar el canal alpha:
    rgba(R,G,B,A)
    rgb(R G B / A)

- HEXADECIMAL

    Es la más común en desarrollo web.
    Se basa en los mismo principios que el RGB pero escrito en notación hexadecimal.
    Es un sistema basado en 16 valores usado los digítos del 0-9 y los caracteres de la A a la F
    Para indicar que vamos a usar notación hexadecimal debemos usar el símbolo de hash/almohadilla # -> #RRGGBB
    Cuando una pareja usa el mismo valor se puede omitir el segundo valor siempre que se haga en las tres parejas
    rgb(255,255,255) -> #FFFFFF -> #FFF
    También podemos usar transparencia añandiendo una cuarta pareja que sigue las mismas normas
    rgb(0 0 0 / .5) -> #00000080

-HSL / HSLA

    Es el más intuitivo para los humanos
    Su nombre viene de las siglas Hue(tono) Saturation(saturación) y lightness (luminancia)
    El primer valor es el ángulo en el círculo cromático donde 0 y 360 será el color rojo.
    Hay ciertos valores que se puede seguir como referencia para relacionar mejor los colores con sus ángulos
        0 -> rojo
        60 -> amarillo
        120 -> verde
        180 -> cyan
        240 -> azul
        300 -> magenta

    El segundo valor está relacionado con la saturación o intensidad del color

        0% -> gris
        100% -> color puro

    El tercer valor es la luminosidad del color 

        0% -> negro, nada de luz
        100% -> blnaco, luz máxima

    NOTA: es importante que aunque el valor de saturación o luminancia sea 0 hay que poner 0%, sino no funciona

    Este modo también admite transparencia y su sintaxis es la misma que la del modo RGB. Tenemos dos opciones
        hsla(h,s,l,a)
        hsl(h s l / a)

        En ambos el valor va del 0 al 1

    Paginas de ayuda para elegir los colores de la web:

     - https://brandcolors.net/
     - https://htmlcolorcodes.com/
     - https://colorhunt.co/
     - https://color.adobe.com/es/create/color-wheel
     



