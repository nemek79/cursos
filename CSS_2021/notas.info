* Sintaxis
==================

* Selector: El elemento al que vamos a aplicar estilos
* Propiedad: Lo que vamos a cambiar
* Valor:  El nuevo valor que le vamos a dar a la propiedad
* Propiedad: Valor -> Se le denomina declaración
* Al conjunto de selector + declaracion(es) se le denomina regla


* Selectores
==================

- Selectores simples

    - Elementales

        - Selector universal -> *
        - Selector de tipo o de etiqueta 
    
    - De atributo
        
        - id -> id del elemento
        - clase -> clase del elemento
        - otros atributos -> 
            [atributo]
            [atributo=valor]
            [atributo^=valor] <- comprobar si el atributo empieza por ese valor
            [atributo*=valor] <- se selecciona el valor que coincida independiente de su posicion
            [atributo$=valor] <- comprobar si el atributo termina por ese valor
            [atributo|=valor] <- incluye el valor y valor-...

- Selectores compuestos

    - Agrupados <- atributos separados por ','
    - Combinadores 
        Selector descendiente <- un selector dentro de otro -> [atributo] [atributo]
        Selector de hermano siguiente <- permite seleccionar el elemento hermano siguiente -> [atributo] + [atributo]
        Selector de todos los hermanos siguientes <- permite seleccionar todos los elementos hermanos siguientes -> [atributo] ~ // el simbolo es ALTGR + 4
        Selector de hijo directo <- permite seleccionar sólo los hijos directos -> [atributo] > [atributo]
    - Pseudoclases - pseudoelementos (más adelante)


* Cómo funciona css
=========================

- Especificidad -> Establece cómo de específico es un selector para saber qué estilo aplicar.
                    El cálculo se realiza con la siguiente fórmula:

                     Etiquetas y pseudoelementos -> 001
                     Clases, atributos, pseduoclases -> 010
                     Ids -> 100
                     Estilos en línea -> 1000
                     !important -> GANA A TODO pero se carga la especificidad <- NO USAR NUNCA -- UTILIZAR SIEMPRE CLASES!

            Cascada -> funciona siempre que la especificidad sobre el elemento sea la misma
            Herencia  -> Es la capacidad que tienen algunos elementos de heredar algunas propiedades de sus elementos 
                         contenedores (padres, abuelos, etc)
                         Para forzar la herencia en los elementos que no la tienen por defecto usamos -> inherit
                         Para evitar que un elemento herede una propiedad por defecto usamos -> inital

- como saber si se escribe buen css -> https://jonassebastianohlsson.com/specificity-graph/


* Normalizar estilos de los navegadores
==========================================

https://necolas.github.io/normalize.css/

* Prefijos propietarios
==========================================

- ayuda a poner los prefijos automaticamente -> https://autoprefixer.github.io/
- programa que pone automaticamente los prefijos -> https://prepros.io/

* Box model
==============================

- las cajas se componen principalmente de:
 
        * contenido
        * borde
        * padding
        * margin
        * width
        * height

    # Alto & Ancho

        - Width -> Ancho
        - Height -> Alto

        - Para los elementos en bloque establecen el ancho y el alto
        - Los elementos en línea no tienen medidas, el tamaño lo determina su contenido

    # Margin

        - Es la propiedad que nos permite generar espacio entre elementos.
        - Es un shorthand que controla los cuatro lados posibles a los que dar márquenes.
        - margin-top: Margen superior
        - margin-right: Margen derecho
        - margin-bottom: Margen inferior
        - margin-left: Margen derecho
        - Admite hasta cuatro valores que van en el orden de las agujas del reloj:
            4 valores -> top right bottom left
            3 valores -> top left/right bottom
            2 valores -> top/bottom left/right
            1 valor -> top/right/bottom/left

        - En los elementos en línea los margin top/bottom (verticales) no funcionan
        - En los elementos en línea los margin left/right (horizontales) si funcionan

        - Para los elementos en bloque: (IMPORTANTE: debe ser de bloque y se debe haber establecido el ancho (width))

            margin-right: auto; <- pegamos el elemento a la izquierda
            margin-left: auto; <- pegamos el elemento a la derecha

            si declaremos las dos a auto al mismo tiempo centramos el elemento

    



